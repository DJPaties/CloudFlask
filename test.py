from base64 import b64decode
import json 
import os

os.remove(os.path.join('static/filename.wav'))


data = b'{"base64data":""}'




decoded_data = data.decode()
# print((decoded_data))
json_data = json.loads(decoded_data)
print(json_data['base64data'])




# decoded_data = decoded_data.replace("\"","")
# decoded_data = decoded_data.replace("{","")
# decoded_data = decoded_data.replace("base64data:","")

# print(decoded_data[:-1])

# dataAduio = b64decode(decoded_data[:-1])
# print((dataAduio))


import subprocess

# import subprocess

# Define the path
path = r'C:\Users\WOB\Documents\testFlask\api\static'

# Run the ffmpeg command to convert the webm file to wav
process = subprocess.Popen(['ffmpeg', '-i', r'C:/Users/WOB/Documents/testFlask/api/static/receivedSouzane.webm', r'C:/Users/WOB/Documents/testFlask/api/static/filename.wav'], shell=True)

# Wait until the process is finished
process.communicate()



import speech_recognition as sr
    
def transcribe_audio_wav(lang):
    r = sr.Recognizer()
# open the file
    with sr.AudioFile("static/filename.wav") as source:
        # listen for the data (load audio to memory)
        audio_data = r.record(source)
        # recognize (convert from speech to text)
        text = r.recognize_google(audio_data,language=lang)
        print(text)
        return text

print(transcribe_audio_wav('ar'))

# print(transcribe_audio_wav('ar'))
    
    
